example.property=I AM THE DEFAULT

spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql=true
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName=org.postgresql.Driver
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

spring.cloud.loadbalancer.ribbon.enabled = false

management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

server.port = 8180

#??? ?? ?? ip ?? ??
eureka.instance.preferIpAddress = true
#??? ??? ?? ??
eureka.client.registerWithEureka = true
#????? ??? ??? ???? = ??? ??
eureka.client.fetchRegistry = true
#??? ???? ?? ??
eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka/

keycloak.realm = spmia-realm
keycloak.auth-server-url = http://localhost:8080/auth
keycloak.ssl-required = external
keycloak.resource = ostock
keycloak.credentials.secret = 13d408fb-cdde-4c09-86b2-12317ba353ab
keycloak.use-resource-role-mappings = true
keycloak.bearer-only = true

#입력 채널을 orgChangeTopic 큐에 매핑한다
#spring.cloud.stream.bindings.input.destination= orgChangeTopic
#spring.cloud.stream.bindings.input.content-type= application/json

#사용자 정의 입력 채널
spring.cloud.stream.bindings.inboundOrgChanges.destination= orgChangeTopic
spring.cloud.stream.bindings.inboundOrgChanges.content-type= application/json
spring.cloud.stream.bindings.inboundOrgChanges.group= licensingGroup

#서비스별로 한 번에 처리하려고 group 프로퍼티 사용
#메시지를 소비하는 소비자 그룹 이름 정의
#licensing service 는 하나의 서비스지만 이 서비스의 인스턴스는 여러개일 수 있어서 그 그룹을 묶음
#즉 licensing service의 인스턴스들은 licensingGroup이라는 이름을 가지게 된다
#spring.cloud.stream.bindings.input.group= licensingGroup
spring.cloud.stream.kafka.binder.zkNodes= localhost:9092
spring.cloud.stream.kafka.binder.brokers= localhost:9092

redis.server = localhost
redis.port = 6379
